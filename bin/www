#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('fab:server');
const telegramBot = require('../telegramBot');
const fs = require('fs');
const https = require('https');
require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.APP_PORT || '3443');

/**
 * Initialize Telegram Bot
 */
telegramBot.init(process.env.TELEGRAM_BOT_TOKEN);

/**
 * Listen on provided port, on all network interfaces.
 */

let credentials = null;
try {
  const privateKey = fs.readFileSync('ssl/privkey1.pem', 'utf8');
  const certificate = fs.readFileSync('ssl/cert1.pem', 'utf8');
  const ca = fs.readFileSync('ssl/chain1.pem', 'utf8');

  credentials = {
    key: privateKey,
    cert: certificate,
    ca,
  };
} catch (err) {
  console.error('Error reading file:', err);
}

const httpsServer = https.createServer(credentials, app);
httpsServer.listen(3443, () => {
  console.log('HTTPS Server running on port 3443');
});
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = httpsServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
